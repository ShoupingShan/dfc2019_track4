'''
20190222
Shan Shouping
'''

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm

def load_kernel_from_file(file_name):
    f = open('/home/shp/Documents/Code/Python/Contest/dfc2019/track4/pointnet2/utils/logs/' + file_name, 'r')
    data = f.readlines()  # txt中所有字符串读入data
    per_kernel = []
    for line in data:
        line = line[:]
        line = line.replace('[','')
        line = line.replace(']','')
        line = line.replace('\n', '')
        line = line.split(' ')
        temp = []
        for item in line:
            if item is not '':
                temp.append(item)
        per_kernel_line = []
        for l in temp:
            l = float(l)
            per_kernel_line.append(l)
        per_kernel.append(per_kernel_line)
    numbers_kernel = []
    for i in range(len(data)//16):
        numbers_kernel.append(per_kernel[i*16:(i+1)*16])
    f.close()
    return numbers_kernel

if __name__ == "__main__":
    file_index = 1
    file_name = 'kernel'+'.log'
    kernel = load_kernel_from_file(file_name)
    # kernel1=[[ 0.69688934 , 1.6666524,   0.7538808 ]
    #  ,[-0.88216096, -0.21003717, -0.32936335]
    #  ,[ 0.49371803, -0.08705169, -0.7175908 ]
    #  ,[-0.48279387,  0.6080605 ,  0.24974637]
    #  ,[-0.13240352, -0.133093,    0.08725197]
    #  ,[ 2.844052 ,  -0.76478666, -0.4431012 ]
    #  ,[ 0.6960856 ,  0.86619765,  1.3104211 ]
    #  ,[-0.32731524,  0.16540553 , 0.5023237 ]
    #  ,[ 0.22899576, -0.00494865,  0.59754133]
    #  ,[ 0.1855135 , -1.2326814 ,  0.40169922]
    #  ,[ 0.9454163 , -0.73424804 ,-0.30863053]
    #  ,[ 1.9327424 , -1.5558653 ,  0.3453633 ]
    #  ,[ 0.53207976 ,-0.04594524, -1.2144487 ]
    #  ,[ 0.4673228,  -1.4157841,  -1.118035  ]
    #  ,[ 0.1917832 , -1.7000252 ,  0.20150998]
    #  ,[ 0.33843598 ,-0.03792071 , 0.05736443]]
    #
    # kernel2 = [[ 0.69688934 , 1.6666524 ,  0.7538808 ]
    #  ,[-0.90037066, -0.2509996 , -0.3644614 ]
    #  ,[ 0.48473474 ,-0.02712526, -0.78940994]
    # , [-0.5387627   ,0.51729286,  0.36995342]
    #  ,[-0.05095878, -0.07808781,  0.02143632]
    #  ,[ 2.844052 ,  -0.76478666, -0.4431012 ]
    #  ,[ 0.6960856 ,  0.86619765,  1.3104211 ]
    #  ,[-0.23418508 , 0.27356133,  0.47122627]
    #  ,[ 0.12426738 , 0.04999153,  0.4147734 ]
    #  ,[ 0.16034941 ,-1.2656803 ,  0.3937087 ]
    #  ,[ 0.9242068 , -0.7105078,  -0.28150976]
    #  ,[ 1.9327424 , -1.5558653,   0.3453633 ]
    #  ,[ 0.51916987, -0.11051963, -1.1976774 ]
    #  ,[ 0.4673228 , -1.4157841 , -1.118035  ]
    #  ,[ 0.179555  , -1.6881099 ,  0.19127803]
    #  ,[ 0.38341105 ,-0.0329369 ,  0.02195084]]
    #
    # kernel3 =  [[ 6.9688934e-01 , 1.6666524e+00 , 7.5388080e-01]
    #  ,[-8.6885691e-01, -2.2836012e-01, -3.9723045e-01]
    #  ,[ 5.1190615e-01,  1.6625280e-02, -8.2308710e-01]
    #  ,[-5.6124610e-01,  4.8976594e-01,  3.4534049e-01]
    #  ,[-3.0065557e-02, -2.4229985e-02, -3.9989423e-02]
    #  ,[ 2.8440521e+00, -7.6478666e-01, -4.4310120e-01]
    #  ,[ 6.9608557e-01,  8.6619765e-01,  1.3104211e+00]
    #  ,[-2.3741165e-01,  2.3992313e-01,  4.7155505e-01]
    #  ,[ 2.3024839e-01, -3.7065786e-03,  4.1732523e-01]
    #  ,[ 1.6038390e-01, -1.2656794e+00,  3.9376456e-01]
    #  ,[ 8.9317417e-01, -7.4263459e-01, -2.4794377e-01]
    #  ,[ 1.9327424e+00, -1.5558653e+00,  3.4536329e-01]
    #  ,[ 5.3576303e-01, -1.0033034e-01, -1.1770158e+00]
    #  ,[ 4.6732280e-01, -1.4157841e+00, -1.1180350e+00]
    #  ,[ 1.7955500e-01, -1.6881099e+00,  1.9127803e-01]
    # , [ 3.9883834e-01,  3.3025910e-05,  4.9759690e-02]]
    #
    # kernel4 = [[ 0.69688934 , 1.6666524,   0.7538808 ] #mark
    #  ,[-0.8233977,  -0.270148 ,  -0.43245155]
    #  ,[ 0.49197784 ,-0.01233898, -0.84422845]
    #  ,[-0.46679232 , 0.48774806 , 0.2555712 ]
    #  ,[-0.03930538, -0.0351206 , -0.09148166]
    #  ,[ 2.844052 ,  -0.76478666, -0.4431012 ] #mark
    #  ,[ 0.6960856 ,  0.86619765,  1.3104211 ] #mark
    #  ,[-0.14836799,  0.1769173 ,  0.50672954]
    #  ,[ 0.18988633,  0.01834315,  0.36095268]
    #  ,[ 0.16042438, -1.2660785 ,  0.39433306]
    #  ,[ 0.89339817, -0.7430015,  -0.24832915]
    #  ,[ 1.9327424,  -1.5558653,   0.3453633 ]
    #  ,[ 0.5296463,  -0.08725307, -1.1564783 ] #mark
    #  ,[ 0.456743 ,  -1.4357331 , -1.0962057 ] #mark
    #  ,[ 0.179555  , -1.6881099,   0.19127803]
    # , [ 0.35204944 , 0.02977375 , 0.05412968]]
    #
    # kernel5 = [[ 0.69688934 , 1.6666524  , 0.7538808 ]
    # , [-0.80799335 ,-0.23831256, -0.46134505]
    #  ,[ 0.4792575 ,  0.05144984, -0.8966244 ]
    #  ,[-0.47997934,  0.52635866 , 0.286409  ]
    #  ,[-0.02283106, -0.10560609, -0.08104997]
    #  ,[ 2.844052 ,  -0.76478666, -0.4431012 ]
    #  ,[ 0.6960856 ,  0.86619765 , 1.3104211 ]
    #  ,[-0.19473906 , 0.18940696,  0.4233818 ]
    #  ,[ 0.11876238 , 0.05972527 , 0.38047254]
    #  ,[ 0.16042686, -1.2660822 ,  0.39433503]
    #  ,[ 0.93368 ,   -0.7920134 , -0.20308498]
    #  ,[ 1.9327424,  -1.5558653,   0.3453633 ]
    #  ,[ 0.5296463,  -0.08725307, -1.1564783 ]
    #  ,[ 0.456743 ,  -1.4357331 , -1.0962057 ]
    #  ,[ 0.179555 ,  -1.6881099,   0.19127803]
    #  ,[ 0.2939061,   0.03347841, -0.01173343]]
    #
    # kernel30 = [[ 6.9688934e-01,  1.6666524e+00,  7.5388080e-01]
    #  ,[-8.1591302e-01, -2.3163854e-01, -4.5354667e-01]
    #  ,[ 5.3902775e-01,  5.5247940e-02, -9.5823413e-01]
    #  ,[-5.4050189e-01,  3.8860416e-01,  3.2013938e-01]
    #  ,[-4.1637748e-02, -9.5466867e-02, -8.1192039e-02]
    #  ,[ 2.8440521e+00, -7.6478666e-01, -4.4310120e-01]
    #  ,[ 6.9608557e-01,  8.6619765e-01,  1.3104211e+00]
    #  ,[-2.3966402e-01,  2.2155240e-01,  4.7167099e-01]
    #  ,[ 2.9809397e-02,  1.2119726e-03,  4.4909677e-01]
    #  ,[ 1.3067371e-01, -1.2978060e+00,  4.2599374e-01]
    #  ,[ 9.3781501e-01, -8.6198348e-01, -1.9101730e-01]
    #  ,[ 1.9327424e+00, -1.5558653e+00,  3.4536329e-01]
    #  ,[ 5.1740795e-01, -9.6726455e-02, -1.1690942e+00]
    #  ,[ 4.5674300e-01, -1.4357331e+00, -1.0962057e+00]
    #  ,[ 1.7950754e-01, -1.6880885e+00,  1.9111863e-01]
    #  ,[ 1.4251238e-01,  6.7031309e-02,  6.1160434e-02]]
    #
    # kernel40 = [[ 0.69688934 , 1.6666524,   0.7538808 ] #mark
    #  ,[-0.8018374 , -0.3429307 , -0.4711138 ]
    #  ,[ 0.62136316,  0.08977105, -0.98597383]
    #  ,[-0.58475137,  0.3421019 ,  0.36113757]
    #  ,[-0.11449699, -0.02539065, -0.01362698]
    #  ,[ 2.844052  , -0.76478666, -0.4431012 ]
    #  ,[ 0.6960856 ,  0.86619765,  1.3104211 ]
    #  ,[-0.23099129,  0.29849744,  0.4950655 ]
    #  ,[ 0.07041232 ,-0.00460847, 0.5065555 ]
    #  ,[ 0.13063113, -1.2978221 ,  0.42603502]
    #  ,[ 0.9086881 , -0.9100284  ,-0.22191562]
    #  ,[ 1.9327424 , -1.5558653 ,  0.3453633 ]
    #  ,[ 0.5459759 , -0.0704304 , -1.1410998 ]
    #  ,[ 0.456743  , -1.4357331 , -1.0962057 ]
    #  ,[ 0.21502812, -1.6565477 ,  0.15861084]
    #  ,[ 0.16701737, -0.01066841, -0.11427181]]
    # kernel.append(kernel1)
    # # kernel.append(kernel2)
    # # kernel.append(kernel3)
    # # kernel.append(kernel4)
    # kernel.append(kernel5)
    # kernel.append(kernel30)
    # kernel.append(kernel40)

    i = 0
    kernel_items = 16
    # color = np.array([2,1,1,1,1,2,2,1,1,1,1,1,2,2,1,1])
    # color = np.random.rand(kernel_items)
    color = np.array(range(1, kernel_items+1))
    color[0] = color[5] = color[6] =color[12] = color[13] = 0
    plt.ion()
    plt.show()

    for items in kernel:

        x = np.array(items)[:,0]
        y = np.array(items)[:,1]
        z = np.array(items)[:,2]
        i += 1
        index = '1'+str(len(kernel))+str(i)
        # ax = plt.plot(111, projection='3d')
        #
        # ax.scatter(x , y, z, c = color, s=300)
        # ax.set_xlabel('X')
        # ax.set_ylabel('Y')
        # ax.set_zlabel('Z')
        fig = plt.figure(1)
        ax = Axes3D(fig)
        ax.scatter(x , y, z, c = color, s=300)
        # ax.text(x, y, z, i, zdir= 'z')
        ax.set_xlim(-1.5, 2.5)
        ax.set_ylim(-1.5, 1.5)
        ax.set_zlim(-1.5, 1.5)
        ax.set_xlabel('X axis')
        ax.set_ylabel('Y axis')
        ax.set_zlabel('Z axis')
        plt.draw()
        plt.pause(0.5)
    plt.show()
